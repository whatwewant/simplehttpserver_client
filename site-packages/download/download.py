#!/usr/bin/env python
# coding=utf-8
import urllib2
import time
import platform
import sys
import os
PYTHON_VERSION = platform.python_version()
sys.path.append(os.path.dirname(__file__)+'../../site-packages')

import requests
import traceback

def download_url(url, absolute_file_name, number, log, percent):
    return download_log(url, absolute_file_name, number, log, percent)

def download_without_log(url, absolute_file_name, number):
    '''
        download without log 
    '''
    # file_name = url.split('/')[-1]
    # print url
    file_name = absolute_file_name

    u = ''
    try:
        u = urllib2.urlopen(url)
    except urllib2.HTTPError:
        return 0

    #f = ''
    #try:
    f = open(file_name, 'wb')
    #except :
    #    return

    meta = u.info()
    file_size = 1
    try:
        file_size = int(meta.getheaders("Content-Length")[0])
    except IndexError:
        file_size = int(requests.head(url).headers.get('Content-Length'))

    unit_size = file_size

    unit = 'byte'
    if file_size > 1024 * 1024 * 1024:
        unit = 'GB'
        unit_size /= float(1024 * 1024 * 1024)
    elif file_size > 1024 * 1024:
        unit = 'MB'
        unit_size /= float(1024 * 1024)
    elif file_size > 1024:
        unit = 'KB'
        unit_size /= float(1024)

    try:
        print("[ %s ]%s Downloading: %s Bytes: %.2f %s" % (time.ctime(), number, file_name.split('/').pop(), unit_size, unit))
    except UnicodeError :
        pass

    file_size_dl = 0
    block_sz = 8192
    while True:
        buffer = u.read(block_sz)
        if not buffer:
            break

        file_size_dl += len(buffer)
        f.write(buffer)
        # status = r"%10d  [%3.2f%%]" % (file_size_dl, file_size_dl * 100. / file_size)
        status = r"%.2f MB  [%3.2f%%]" % (file_size_dl/float(1024*1024), file_size_dl * 100. / file_size)
        status = status + chr(8)*(len(status)+1) 
        
        # print (status,)
        sys.stdout.write(status + '\r')
        sys.stdout.flush()

    f.close()

def download_log(url, absolute_file_name, number, log, percent):
    '''
        download 
        return tuple(file_target_size, file_real_size)
    '''
    # file_name = url.split('/')[-1]
    # print url
    file_name = absolute_file_name
    tmp_file_name = absolute_file_name + '.tmp'

    exists_size = 0
    if os.path.exists(tmp_file_name):
        exists_size = os.path.getsize(tmp_file_name)

    u = ''
    try:
        req = urllib2.Request(url)
        # 实现断点续传关键
        req.add_header('Range', 'bytes=%d-' % exists_size)
        print req.headers
        u = urllib2.urlopen(req)
    except urllib2.HTTPError:
        return (0, 0)


    meta = u.info()
    file_size = 1
    try:
        file_size = int(meta.getheaders("Content-Length")[0])
    except IndexError:
        with open(log, 'a') as f:
            traceback.print_exc(file=f)
        file_size = int(requests.head(url).headers.get('Content-Length'))

    if file_size == exists_size:
        print("File %s already downloaded" % file_name.split('/')[0])
        return (file_size, file_size)

    unit_size = file_size
    unit = 'byte'
    if file_size > 1024 * 1024 * 1024:
        unit = 'GB'
        unit_size /= float(1024 * 1024 * 1024)
    elif file_size > 1024 * 1024:
        unit = 'MB'
        unit_size /= float(1024 * 1024)
    elif file_size > 1024:
        unit = 'KB'
        unit_size /= float(1024)

    try:
        print("%s Downloading: %s Bytes: %.2f %s [ALL: %3.2f%%]" % (number, file_name.split('/').pop(), unit_size, unit, percent))
    except UnicodeError :
        with open(log, 'a') as f:
            traceback.print_exc(file=f)

    file_size_dl = exists_size
    block_sz = 8192

    f = ''
    # append method
    try:
        f = open(tmp_file_name, 'ab')
    except IOError:
        with open(log, 'a') as f:
            traceback.print_exc(file=f)
        f.close()
        return (0, 0)

    start_second = time.time()
    speed_size = 0
    # KeyboardInterrupt close file handle
    try:
        while True:
            buffer = u.read(block_sz)
            if not buffer:
                break

            file_size_dl += len(buffer)
            speed_size += len(buffer)
            f.write(buffer)
            end_second = time.time()
            # Download Speed
            download_speed = speed_size / float(end_second - start_second)

            # Left Time According to current speed
            left_time = 0
            if download_speed > 0:
                left_time = (file_size - file_size_dl) / float(download_speed)
                left_time = int(left_time)

            second = left_time % 60
            second = '0' + str(second) if second < 10 else str(second)
            minute = left_time / 60 % 60
            minute = '0' + str(minute) if minute < 10 else str(minute)
            hour = left_time / 3600
            hour = '0' + str(hour) if hour < 10 else str(hour)

            left_time = '%s:%s:%s' % (hour, minute, second)

            if download_speed > 1024 * 1204:
                download_speed /= float(1024*1024)
                download_speed = '%.2f MB/s' % download_speed
            elif download_speed > 1024:
                download_speed /= float(1024)
                download_speed = '%.2f K/s' % download_speed
            else:
                download_speed = '%.2f B/s' % download_speed

            status = r"%.2f MB  [%3.2f%%] Speed: %s  Left Time: %s" % \
                        (file_size_dl/float(1024*1024), 
                        file_size_dl * 100. / file_size,
                        download_speed,
                        left_time)
            status = status + chr(8)*(len(status)+1) 
            
            sys.stdout.write(status + '\r')
            sys.stdout.flush()
    except KeyboardInterrupt:
        f.close()
        print("KeyboardInterrupt Stop downloading.")
    finally:
        f.close()

    # rename tmpname to real name
    if file_size_dl == file_size:
        os.rename(tmp_file_name, file_name)

    return (file_size, file_size_dl)
